<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="ex5.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;array&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>


<function><type><name>int</name></type> <name>subSum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>arr</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>W</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt> <comment type="line">// sum we are trying to add to</comment>
    <decl_stmt><decl><type><name>int</name></type> <name><name>subset</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>W</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line">// 2D array to hold summed values</comment>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>w</name> <operator>&lt;=</operator> <name>W</name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <comment type="line">// initalizing values</comment>
        <expr_stmt><expr><name><name>subset</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>w</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <comment type="line">// filling subset table</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>w</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>w</name> <operator>&lt;=</operator> <name>W</name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>w</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>subset</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>w</name></expr>]</index></name> <operator>=</operator> <name><name>subset</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>w</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>subset</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>w</name></expr>]</index></name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>subset</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>w</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>subset</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>w</name> <operator>-</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>


    <return>return <expr><name><name>subset</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>W</name></expr>]</index></name></expr>;</return> <comment type="line">// return closest value to target sum</comment>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name>int</name></type> <name>subSumApprox</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>arr</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><name>arr</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><call><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// sort array descending order</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt> <comment type="line">// target sum</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>curr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// current sum of numbers at a time</comment>


    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <comment type="line">// add numbers in descending order until one will make sum go over 1000, return current sum</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>curr</name> <operator>+</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <name>sum</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>curr</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>curr</name> <operator>=</operator> <name>curr</name> <operator>+</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>



    <return>return <expr><name>curr</name></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name><name>arr</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line">// array to hold random numbers</comment>

    <expr_stmt><expr><call><name>srand</name> <argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// to initialize random seed</comment>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <comment type="line">// filling array with random numbers &lt;= 600</comment>
        <expr_stmt><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">600</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><call><name>subSum</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>numApprox</name> <init>= <expr><call><name>subSumApprox</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Dynamic: "</literal> <operator>&lt;&lt;</operator> <name>num</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Greedy: "</literal> <operator>&lt;&lt;</operator> <name>numApprox</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>



    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function></unit>
