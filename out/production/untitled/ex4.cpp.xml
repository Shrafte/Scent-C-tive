<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="ex4.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="line">// Number of vertices in the graph</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<comment type="line">// A utility function to find the vertex with</comment>
<comment type="line">// minimum key value, from the set of vertices</comment>
<comment type="line">// not yet included in MST</comment>
<function><type><name>int</name></type> <name>minKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>key</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name><name>mstSet</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Initialize min value</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>min_index</name></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>V</name></expr>;</condition> <incr><expr><name>v</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><name><name>mstSet</name><index>[<expr><name>v</name></expr>]</index></name> <operator>==</operator> <literal type="boolean">false</literal> <operator>&amp;&amp;</operator> <name><name>key</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&lt;</operator> <name>min</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>min</name> <operator>=</operator> <name><name>key</name><index>[<expr><name>v</name></expr>]</index></name></expr><operator>,</operator> <expr><name>min_index</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

    <return>return <expr><name>min_index</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// A utility function to print the</comment>
<comment type="line">// constructed MST stored in parent[]</comment>
<function><type><name>void</name></type> <name>printMST</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>parent</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>graph</name><index>[<expr><name>V</name></expr>]</index><index>[<expr><name>V</name></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Edge \tWeight\n"</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>V</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" - "</literal> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="string">" \t"</literal>
             <operator>&lt;&lt;</operator> <name><name>graph</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" \n"</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<comment type="line">// Function to construct and print MST for</comment>
<comment type="line">// a graph represented using adjacency</comment>
<comment type="line">// matrix representation</comment>
<function><type><name>void</name></type> <name>primMST</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>graph</name><index>[<expr><name>V</name></expr>]</index><index>[<expr><name>V</name></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Array to store constructed MST</comment>
    <decl_stmt><decl><type><name>int</name></type> <name><name>parent</name><index>[<expr><name>V</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="line">// Key values used to pick minimum weight edge in cut</comment>
    <decl_stmt><decl><type><name>int</name></type> <name><name>key</name><index>[<expr><name>V</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="line">// To represent set of vertices included in MST</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name><name>mstSet</name><index>[<expr><name>V</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="line">// Initialize all keys as INFINITE</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>V</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT_MAX</name></expr><operator>,</operator> <expr><name><name>mstSet</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block_content></block></for>

    <comment type="line">// Always include first 1st vertex in MST.</comment>
    <comment type="line">// Make key 0 so that this vertex is picked as first</comment>
    <comment type="line">// vertex.</comment>
    <expr_stmt><expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>parent</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// First node is always root of MST</comment>

    <comment type="line">// The MST will have V vertices</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <name>V</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <comment type="line">// Pick the minimum key vertex from the</comment>
        <comment type="line">// set of vertices not yet included in MST</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><call><name>minKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>mstSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Add the picked vertex to the MST Set</comment>
        <expr_stmt><expr><name><name>mstSet</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

        <comment type="line">// Update key value and parent index of</comment>
        <comment type="line">// the adjacent vertices of the picked vertex.</comment>
        <comment type="line">// Consider only those vertices which are not</comment>
        <comment type="line">// yet included in MST</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>V</name></expr>;</condition> <incr><expr><name>v</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

            <comment type="line">// graph[u][v] is non zero only for adjacent</comment>
            <comment type="line">// vertices of m mstSet[v] is false for vertices</comment>
            <comment type="line">// not yet included in MST Update the key only</comment>
            <comment type="line">// if graph[u][v] is smaller than key[v]</comment>
            <if_stmt><if>if <condition>(<expr><name><name>graph</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>mstSet</name><index>[<expr><name>v</name></expr>]</index></name> <operator>==</operator> <literal type="boolean">false</literal>
                <operator>&amp;&amp;</operator> <name><name>graph</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>&lt;</operator> <name><name>key</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>parent</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>u</name></expr><operator>,</operator> <expr><name><name>key</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name><name>graph</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
    </block_content>}</block></for>

    <comment type="line">// print the constructed MST</comment>
    <expr_stmt><expr><call><name>printMST</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Driver's code</comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="block">/* Let us create the following graph
        2 3
    (0)--(1)--(2)
    | / \ |
    6| 8/ \5 |7
    | / \ |
    (3)-------(4)
            9     */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name><name>graph</name><index>[<expr><name>V</name></expr>]</index><index>[<expr><name>V</name></expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
                        <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,
                        <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>,
                        <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>,
                        <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

    <comment type="line">// Print the solution</comment>
    <expr_stmt><expr><call><name>primMST</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function></unit>
